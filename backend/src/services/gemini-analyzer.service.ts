import { GoogleGenAI } from '@google/genai';
import { NewsArticle } from './news-scraper.service';

/**
 * Servicio de an√°lisis profundo con Gemini AI
 */
export class GeminiAnalyzerService {
  private ai: GoogleGenAI | null = null;
  private apiKey: string | null = null;
  
  /**
   * Intenta limpiar y parsear un bloque de texto como JSON.
   * Maneja casos comunes: fences ```json, comillas tipogr√°ficas, comas colgantes.
   */
  private tryParseJsonLoose(raw: string): any | null {
    if (!raw) return null;
    let text = raw.trim();
    
    console.log(`üîç Texto original (primeros 100 chars): ${text.substring(0, 100)}`);
    
    // Quitar BOM si existe y prefijo 'json' en primera l√≠nea
    text = text.replace(/^\uFEFF/, '').replace(/^json\s*/i, '');

    // Quitar comillas envolventes si vienen '...'/"..."
    if ((text.startsWith('"') && text.endsWith('"')) || (text.startsWith("'") && text.endsWith("'"))) {
      text = text.slice(1, -1);
    }
    
    // Quitar fences ```json ... ``` o ``` ... ```
    if (text.startsWith('```')) {
      text = text.replace(/^```json\s*/i, '').replace(/^```\s*/i, '');
      if (text.endsWith('```')) {
        text = text.slice(0, -3);
      }
    }

    // Reemplazar comillas tipogr√°ficas por comillas normales
    text = text
      .replace(/[""]/g, '"')
      .replace(/['']/g, "'");

    // Eliminar comas colgantes antes de } o ]
    text = text
      .replace(/,\s*}/g, '}')
      .replace(/,\s*]/g, ']');

    // A veces vienen secuencias escapadas innecesariamente
    const candidate = text.replace(/\\n/g, '\n');
    
    console.log(`üîç Texto despu√©s de limpieza (primeros 100 chars): ${candidate.substring(0, 100)}`);

    try {
      const result = JSON.parse(candidate);
      console.log(`‚úÖ JSON parseado exitosamente`);
      return result;
    } catch (parseError: any) {
      console.log(`‚ùå Error en JSON.parse: ${parseError.message}`);
      console.log(`üîç Texto problem√°tico (√∫ltimos 100 chars): ${candidate.slice(-100)}`);
      
      // √öltimo intento: extraer el primer objeto JSON plausible
      const match = candidate.match(/\{[\s\S]*\}/);
      if (match) {
        console.log(`üîç Intentando con match extra√≠do (primeros 100 chars): ${match[0].substring(0, 100)}`);
        try {
          const result = JSON.parse(match[0]);
          console.log(`‚úÖ JSON parseado con match extra√≠do`);
          return result;
        } catch (matchError: any) {
          console.log(`‚ùå Error en match extra√≠do: ${matchError.message}`);
          return null;
        }
      }
      return null;
    }
  }

  /**
   * Inicializa Gemini AI (lazy loading)
   */
  private initGemini(): void {
    if (this.ai) return; // Ya inicializado

    const apiKey = process.env.GEMINI_API_KEY;
    if (!apiKey) {
      console.warn('‚ö†Ô∏è GEMINI_API_KEY no configurada en el momento de inicializaci√≥n');
      return;
    }

    try {
      this.apiKey = apiKey;
      this.ai = new GoogleGenAI({ apiKey });
      console.log('‚úÖ Gemini AI inicializado con librer√≠a oficial');
    } catch (error: any) {
      console.error('‚ùå Error inicializando Gemini AI:', error.message);
      this.ai = null;
      this.apiKey = null;
    }
  }

  constructor() {
    // No inicializar aqu√≠, hacerlo lazy
    console.log('üîë Servicio Gemini creado (inicializaci√≥n lazy)');
  }

  /**
   * Analiza noticias y genera un informe completo
   */
  async analyzeNews(
    articles: NewsArticle[],
    userQuery: string,
    userInterests: string[] = []
  ): Promise<{
    summary: string;
    keyPoints: string[];
    suggestions: string[];
    sentiment: 'positive' | 'negative' | 'neutral';
    relevantArticles: number[];
  }> {
    try {
      console.log(`üß† Iniciando an√°lisis con ${articles.length} art√≠culos`);
      console.log(`üîë API Key disponible: ${this.ai ? 'S√ç' : 'NO'}`);

      // Inicializar Gemini si no est√° inicializado
      this.initGemini();

      if (!this.ai) {
        console.log('‚ùå Gemini AI no inicializado, usando fallback');
        return this.createFallbackAnalysis(articles, userQuery);
      }

      console.log(`üß† Analizando ${articles.length} art√≠culos con Gemini AI...`);

      // Preparar contexto de noticias
      const newsContext = articles.map((article, idx) =>
        `[${idx + 1}] ${article.source} - ${article.title}\n   ${article.snippet}\n   URL: ${article.url}`
      ).join('\n\n');

      const interestsText = userInterests.length > 0
        ? `\n\nIntereses del usuario: ${userInterests.join(', ')}`
        : '';

      console.log(`üìù Preparando prompt con ${newsContext.length} caracteres...`);
      const prompt = `Analiza las siguientes ${articles.length} noticias sobre "${userQuery}" y responde √öNICAMENTE con un objeto JSON v√°lido.${interestsText}

NOTICIAS:
${newsContext}

INSTRUCCIONES:
1. Resumen ejecutivo de 4-6 p√°rrafos (m√≠nimo 300 palabras)
2. 5-7 puntos clave relevantes
3. 3-5 sugerencias espec√≠ficas de b√∫squeda
4. Sentimiento general
5. Art√≠culos relevantes (√≠ndices)

RESPONDE SOLO CON ESTE JSON (sin texto adicional, sin explicaciones, sin markdown):
{
  "summary": "resumen ejecutivo extenso aqu√≠",
  "keyPoints": ["punto 1", "punto 2", "punto 3", "punto 4", "punto 5"],
  "suggestions": ["sugerencia 1", "sugerencia 2", "sugerencia 3"],
  "sentiment": "positive",
  "relevantArticles": [0, 1, 2]
}`;

      console.log(`üöÄ Enviando petici√≥n a Gemini con modelo oficial...`);

      const response = await this.ai.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: prompt,
      });

      console.log(`üìù Tipo de respuesta:`, typeof response);
      console.log(`üìù Propiedades de respuesta:`, Object.keys(response || {}));

      const generatedText = response.text;
      console.log(`‚úÖ Respuesta recibida de Gemini`);
      console.log(`üìù Texto generado (primeros 200 chars):`, generatedText?.substring(0, 200));

      // Intentar parseo directo primero
      try {
        const parsed = JSON.parse(generatedText || '');
        console.log(`‚úÖ JSON parseado directamente`);
        return {
          summary: parsed.summary || '',
          keyPoints: parsed.keyPoints || [],
          suggestions: parsed.suggestions || parsed.recommendations || [],
          sentiment: parsed.sentiment || 'neutral',
          relevantArticles: parsed.relevantArticles || []
        };
      } catch (directError: any) {
        console.log(`‚ö†Ô∏è Parseo directo fall√≥: ${directError.message}`);
        
        // Intentar con saneamiento como respaldo
        const parsed = this.tryParseJsonLoose(generatedText || '');
        if (parsed) {
          console.log(`‚úÖ JSON parseado con saneamiento`);
          return {
            summary: parsed.summary || '',
            keyPoints: parsed.keyPoints || [],
            suggestions: parsed.suggestions || parsed.recommendations || [],
            sentiment: parsed.sentiment || 'neutral',
            relevantArticles: parsed.relevantArticles || []
          };
        }

        console.warn(`‚ö†Ô∏è No se pudo parsear JSON de la respuesta, usando fallback`);
        return this.createFallbackAnalysis(articles, userQuery);
      }
    } catch (error: any) {
      console.error('‚ùå Error en an√°lisis de Gemini:', error.message);
      if (error.response) {
        console.error('‚ùå Respuesta de error:', error.response.status, error.response.data);
      }
      console.log('üîÑ Usando fallback...');
      return this.createFallbackAnalysis(articles, userQuery);
    }
  }

  /**
   * An√°lisis de respaldo cuando Gemini falla
   */
  private createFallbackAnalysis(articles: NewsArticle[], query: string) {
    const sources = [...new Set(articles.map(a => a.source))];

    // Crear resumen extenso
    const mainArticle = articles[0];
    const summary = `Esto es lo que encontr√© sobre "${query}": ${mainArticle?.title || 'Informaci√≥n actualizada'}. ${mainArticle?.snippet || ''}

Las fuentes consultadas incluyen ${sources.slice(0, 3).join(', ')}${sources.length > 3 ? ' y otros medios reconocidos' : ''}. Este tema ha generado considerable inter√©s en los √∫ltimos d√≠as debido a su relevancia actual.

Seg√∫n los expertos y analistas consultados, este es un tema que requiere atenci√≥n especial por sus implicaciones a corto y largo plazo. Los diferentes medios han abordado el tema desde m√∫ltiples perspectivas, ofreciendo an√°lisis complementarios.

Es importante seguir de cerca los desarrollos futuros relacionados con este tema, ya que podr√≠a tener impactos significativos en diversos sectores.`;

    // Generar sugerencias espec√≠ficas basadas en el query
    const suggestions = [
      `¬øCu√°les son las √∫ltimas noticias sobre ${query}?`,
      `Impacto de ${query} en la econom√≠a`,
      `An√°lisis de expertos sobre ${query}`,
      `Perspectivas futuras de ${query}`
    ];

    return {
      summary,
      keyPoints: articles.slice(0, 5).map(a => a.title),
      suggestions: suggestions.slice(0, 4),
      sentiment: 'neutral' as const,
      relevantArticles: articles.map((_, i) => i).slice(0, 3)
    };
  }
}

export default new GeminiAnalyzerService();
